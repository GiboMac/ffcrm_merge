- (@master.field_groups + @duplicate.field_groups).uniq.each do |field_group|
  - if field_group.fields.any?
    - duplicate_attributes = custom_field_merge_attributes(field_group, @duplicate)
    - master_attributes    = custom_field_merge_attributes(field_group, @master)
    - default_merge        = calculate_default_merge(duplicate_attributes, master_attributes)

    - if duplicate_attributes.keys.detect{ |k| duplicate_attributes[k].present? || master_attributes[k].present? }
      .section
        %h2
          = field_group.label
        %p
          Only fields that contain data are shown.
        %table
          %tr
            %th
            %th{ :class => 'merge_title', :width => "40%" }
              = "#{t(:duplicate_asset, :asset => t(:contact))}: #{@duplicate.name}"
            %th{ :class => 'merge_title', :width => "40%" }
              = "#{t(:master_asset, :asset => t(:contact))}: #{@master.name}"
            - duplicate_attributes.keys.each do |attribute|
              - duplicate_value, master_value = duplicate_attributes[attribute], master_attributes[attribute]
              - unless duplicate_value.blank? and master_value.blank?
                %tr
                  %th{ :width => "20%" }
                    .label #{t(attribute, :default => attribute.humanize,  :scope => [:activerecord, :attributes, @master.class.to_s.underscore])}
                  %td
                    = ignore_merge_radio_button("no",  attribute, default_merge[attribute]) unless duplicate_value.blank?
                    .label #{duplicate_value}
                  %td
                    = ignore_merge_radio_button("yes", attribute, default_merge[attribute]) unless master_value.blank?
                    .label #{master_value}
